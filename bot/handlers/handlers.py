
from aiogram import Router, types, F
from aiogram.filters import CommandStart
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo

from data.orm_query import orm_add_user
from sqlalchemy.ext.asyncio import AsyncSession

from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo


router = Router()


# üé¨ –°—Ç–∞—Ä—Ç-–∫–æ–º–∞–Ω–¥–∞
@router.message(CommandStart())
async def start_handler(message: types.Message, session: AsyncSession):
    await orm_add_user(
        session,
        user_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name,
    )
    await message.answer("ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ç–µ—Å—Ç–∞ –ø–µ—Ä–≤–æ–≥–æ mini_app –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –∏ –∫–∞—Ñ–µ.")



@router.message(F.text == "/mini_app")
async def start_handler(message: Message):
    # –ö–Ω–æ–ø–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –∏–º–µ–Ω–Ω–æ Mini App, –∞ –Ω–µ –≤–Ω–µ—à–Ω–∏–π –±—Ä–∞—É–∑–µ—Ä
    web_app_btn = InlineKeyboardButton(
        text="–û—Ç–∫—Ä—ã—Ç—å Mini App",
        web_app=WebAppInfo(url="https://574ec79cbc18d09bf8fc624bef0a0515.serveo.net/mini_app")

    )
    kb = InlineKeyboardMarkup(inline_keyboard=[[web_app_btn]])

    # –î–µ–ª–∞–µ–º –æ—Ç–≤–µ—Ç –∏ –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await message.answer(
        "–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –Ω–∞—à–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:",
        reply_markup=kb
    )



# @router.message(F.text == "/mini_app")
# async def start_handler(message: Message):
#     web_app_btn = InlineKeyboardButton(
#         text="–û—Ç–∫—Ä—ã—Ç—å Mini App",
#         web_app=WebAppInfo(url="https://mycafebot.serveo.net/mini_app")
#     )
#     kb = InlineKeyboardMarkup(inline_keyboard=[[web_app_btn]])
#     await message.answer(
#         "–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –Ω–∞—à–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:",
#         reply_markup=kb
#     )






# # üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–Ω–∞–Ω–∏–π –∫–æ–º–ø–∞–Ω–∏–∏ —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
# with open("bot/company_info.md", "r", encoding="utf-8") as file:
#     raw_company_knowledge = file.read()
#     company_knowledge = escape_markdown_v2(raw_company_knowledge)


#
# # üì¨ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —á–∞—Å—Ç—è–º
# async def send_long_message(message: types.Message, text: str):
#     max_length = 4096
#     for i in range(0, len(text), max_length):
#         await message.answer(text[i:i + max_length], disable_web_page_preview=True)
#
# # ü§ñ –û—Å–Ω–æ–≤–Ω–æ–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
# @router.message()
# async def consult_user(message: types.Message):
#     user_text = escape_markdown_v2(message.text)  # —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#     prompt = (
#         f"–¢—ã –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –∫–æ–º–ø–∞–Ω–∏–∏ –ó–ê–û '–°–ª–∏–≤–∫–∏ –±–∞–π'. "
#         f"–î–∞–≤–∞–π –∫–æ—Ä–æ—Ç–∫–∏–µ, —á–µ—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã.\n"
#         f"–£ —Ç–µ–±—è –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏:\n{company_knowledge}\n"
#         f"–í–æ–ø—Ä–æ—Å: {user_text}"
#     )
#
#     response = get_mistral_response(prompt)
#
#     if not response:
#         response = "–Ø –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ-–¥—Ä—É–≥–æ–º—É."
#
#     response = escape_markdown_v2(response)
#     await send_long_message(message, response)



import pathlib
from fastapi import FastAPI, Request, Depends
from fastapi.responses import HTMLResponse
from fastapi.templating import Jinja2Templates
from fastapi.staticfiles import StaticFiles

from sqlalchemy.ext.asyncio import AsyncSession
from data.get_async_session import get_async_session
from data.orm_query import orm_get_categories, orm_get_products_by_category
from data.config import load_config
from fastapi import Path

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –∏–∑ .env
config = load_config(".env")  # <-- –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—É—Ç—å –∫ .env

# –õ–æ–≥–∏—Ä—É–µ–º –ø—É—Ç—å –¥–æ –±–∞–∑—ã
print(f"üì¶ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {config.db.dsn}")

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –¥–æ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
BASE_DIR = pathlib.Path(__file__).resolve().parent.parent


# –°–æ–∑–¥–∞—ë–º FastAPI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI()

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –ø–∞–ø–∫—É static
app.mount("/static", StaticFiles(directory=BASE_DIR / "static"), name="static")

# –ü–æ–¥–∫–ª—é—á–∞–µ–º Jinja2-—à–∞–±–ª–æ–Ω—ã
templates = Jinja2Templates(directory=BASE_DIR / "templates")


@app.get("/mini_app", response_class=HTMLResponse)
async def mini_app(request: Request):
    return templates.TemplateResponse("index.html", {"request": request})


@app.get("/menu", response_class=HTMLResponse)
async def get_menu(request: Request, session: AsyncSession = Depends(get_async_session)):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories = await orm_get_categories(session)
        return templates.TemplateResponse("menu_category.html", {
            "request": request,
            "categories": categories
        })
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
        return HTMLResponse(content=f"<h1>–û—à–∏–±–∫–∞: {e}</h1>", status_code=500)



@app.get("/menu", response_class=HTMLResponse)
async def get_menu(request: Request, session: AsyncSession = Depends(get_async_session)):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories = await orm_get_categories(session)
        return templates.TemplateResponse("menu_category.html", {
            "request": request,
            "categories": categories
        })
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
        return HTMLResponse(content=f"<h1>–û—à–∏–±–∫–∞: {e}</h1>", status_code=500)



@app.get("/menu/{category_id}", response_class=HTMLResponse)
async def get_products_by_category(
    request: Request,
    category_id: int = Path(..., description="ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"),
    session: AsyncSession = Depends(get_async_session)
):
    try:
        products = await orm_get_products_by_category(category_id, session)
        print([product.name for product in products])
        return templates.TemplateResponse("product.html", {
            "request": request,
            "products": products
        })
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {e}")
        return HTMLResponse(content=f"<h1>–û—à–∏–±–∫–∞: {e}</h1>", status_code=500)


















